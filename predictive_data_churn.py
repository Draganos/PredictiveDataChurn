# -*- coding: utf-8 -*-
"""Predictive Data Churn.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/17Ow4i0ZI6yCyh7_qSNdRJkGrB9d17f73

##This project has the goal of building the foundation of a predictive model for customer churn.
To do this, i've picked out the following data types which are most crucial:

|       Name            | Description                                      | Relevance                                              |
| --------------------- | ------------------------------------------------ | ------------------------------------------------------ |
| Customer_Demographics | Includes age, gender, income, and marital status | Useful for understanding demographic patterns of churn |
| Transaction_History   | Contains spending and payment data               | Financial behavior suggests patterns relevant          |
| Customer_Service      | Records number of support tickets and complaints | Poor service experience can push churn                 |
| Online_Activity       | Includes login frequency & last activity date    | Declining engagement indicates potential churn         |
| Churn_Status          | Indicates whether the customer has churned       | The target variable                                    |

To churn correctly - combine all types of data and merge on one key (CustomerID key)

Relevant data:
* tot. customers: 7043
* tot. variables after merging: 35
* Churn rate: 26.5%

Relevant types to note:

0.   CustomerID
1.   Age
2.   Gender
3.   MaritalStatus
4.   IncomeLevel
5.   TransactionID
6.   TransactionDate
7.   AmountSpent
8.  ProductCategory
9.  InteractionID
10.  InteractionDate
11.  InteractionType
12.  ResolutionStatus
13.  LastLoginDate
14.  LoginFrequency
15.  ServiceUsage
16.  ChurnStatus
"""

#importing and labelling data
#service represents customer service, activity represents online activity as referred to table above
import pandas as pd
excelfile = pd.ExcelFile("Customer_Churn_Data_Large.xlsx")
excelfile.sheet_names
demographics = pd.read_excel(excelfile, "Customer_Demographics")
transactions = pd.read_excel(excelfile, "Transaction_History")
service = pd.read_excel(excelfile, "Customer_Service")
activity = pd.read_excel(excelfile, "Online_Activity")
churn = pd.read_excel(excelfile, "Churn_Status")

#select only correct columns from demographics dataframe
demographics_selected = demographics[['CustomerID', 'Age', 'Gender', 'IncomeLevel', 'MaritalStatus']]

#merging data under key CustomerID
df = demographics_selected.merge(transactions, on="CustomerID", how="left")
df = df.merge(service, on="CustomerID", how="left")
df = df.merge(activity, on="CustomerID", how="left")
df = df.merge(churn, on="CustomerID", how="left")
df.fillna({
    'IncomeLevel': 'Missing',
}, inplace=True)

#remove outliers as needed//set bounds for outliers by quantiles
for col in ['Age', 'AmountSpent', 'LoginFrequency']:
    q01 = df[col].quantile(0.01)
    q99 = df[col].quantile(0.99)
    df[col] = df[col].clip(q01, q99)

df = pd.get_dummies(df, drop_first=True)
from sklearn.preprocessing import StandardScaler
scaler = StandardScaler()
numeric = df.select_dtypes(include=['float64', 'int64']).columns
df[numeric] = scaler.fit_transform(df[numeric])
df.to_csv("cleaned_churn_dataset.csv", index=False)





"""## Analyze churn distribution

### Subtask:
Visualize the distribution of the 'ChurnStatus' column to understand the proportion of churned versus non-churned customers.

"""

import matplotlib.pyplot as plt
import seaborn as sns

plt.figure(figsize=(6, 4))
sns.countplot(x='ChurnStatus', data=df)
plt.title('Distribution of Customer Churn Status')
plt.xlabel('Churn Status')
plt.ylabel('Number of Customers')
plt.show()

numerical_cols = df.select_dtypes(include=['float64', 'int64']).columns.tolist()
exclude_cols = ['CustomerID', 'TransactionID', 'ChurnStatus']
numerical_cols = [col for col in numerical_cols if col not in exclude_cols]

for col in numerical_cols:
    plt.figure(figsize=(10, 6))
    sns.histplot(data=df, x=col, kde=True)
    plt.title(f'Distribution of {col}')
    plt.xlabel(col)
    plt.ylabel('Frequency')
    plt.show()

    plt.figure(figsize=(10, 6))
    sns.boxplot(data=df, x=col)
    plt.title(f'Box Plot of {col}')
    plt.xlabel(col)
    plt.show()